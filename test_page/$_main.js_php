//test_page/$_main.js_php - Javascript code with PHP macros, for testing Virtual Camera injection into list of available cameras.
//(c)2022 David C. Walley


const                                   g_eleVideo           = document.getElementById('video0'      ); //>
const                                   g_eleButtonGoList    = document.getElementById('buttonGoList'); //>
const                                   g_eleButtonCamera    = document.getElementById('buttonCamera'); //>
const                                   g_eleSelect          = document.getElementById('selectSource'); //>
let                                     g_currentStream      ;                                          //>


function                                UpdateVideoSourceOptions(/////////////////////////////////////////>
                                        a_mediaDevices                                                  //>
){                                      //////////////////////////////////////////////////////////////////>
 g_eleSelect.innerHTML = '';                                                                            //>
 let                                    count                   = 1;                                    //>
 a_mediaDevices.forEach(                                                                                //>
  function( a_mediaDevice ){                                                                            //>
   if( a_mediaDevice.kind !== 'videoinput' ){                                                   return;}//>
   const                                eleOption               = document.createElement('option');     //>
   eleOption.value = a_mediaDevice.deviceId;                                                            //>
   count++                                                                                              //>
   const                                label            = a_mediaDevice.label   ||   'Camera '+ count; //>
   const                                textNode         = document.createTextNode( label );            //>
   eleOption.appendChild(textNode);                                                                     //>
   g_eleSelect.appendChild(eleOption);                                                                  //>
  }//function                                                                                           //>
 );//forEach                                                                                            //>
}//UpdateVideoSourceOptions///////////////////////////////////////////////////////////////////////////////>


function                                OnClick_GoList(///////////////////////////////////////////////////>
                                        a_eventDummy                                                    //>
){                                      //////////////////////////////////////////////////////////////////>
 navigator.mediaDevices.enumerateDevices().then( UpdateVideoSourceOptions );                            //> List devices currently available in 
}//UpdateVideoSourcesList/////////////////////////////////////////////////////////////////////////////////>


function                                OnClick_GoCamera(/////////////////////////////////////////////////>
                                        a_eventDummy                                                    //>
){                                      //////////////////////////////////////////////////////////////////>
 if( typeof g_currentStream !== 'undefined' ){                                                          //> If there are any current streams, then
  g_currentStream.getTracks().forEach(   function(track){ track.stop(); }   );                          //> stop them
 }//if                                                                                                  //> .
                                                                                                        //>
 const                                  videoConstraints            = {};                               //>
 if( g_eleSelect.value === '' ){        videoConstraints.facingMode = 'user';                         } //>
 else                          {        videoConstraints.deviceId   = { exact : g_eleSelect.value };  } //>
 navigator.mediaDevices.getUserMedia(                                                                   //>
  {video : videoConstraints                                                                             //>
  ,audio : false                                                                                        //>
  }                                                                                                     //>
 ).then(   function(a_stream){                                                                          //>
            g_currentStream      = a_stream;                                                            //>
            g_eleVideo.srcObject = a_stream;                                                            //>
  }        )                                                                                            //>
 .catch(   function(a_error){ console.log(a_error); }   );                                              //>
}//UpdateVideoSourcesList/////////////////////////////////////////////////////////////////////////////////>


g_eleButtonGoList.addEventListener( 'click' ,OnClick_GoList   );
g_eleButtonCamera.addEventListener( 'click' ,OnClick_GoCamera );

navigator.mediaDevices.enumerateDevices().then( UpdateVideoSourceOptions );


//End of file.